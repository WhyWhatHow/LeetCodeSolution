Classfile /D:/LeetCode/code/LeetCodeSolution/offerProblems/target/classes/jvm/TestJavap.class
  Last modified 2021-8-6; size 569 bytes
  MD5 checksum 239a2103143410b80546e00d79455519
  Compiled from "TestJavap.java"
public class jvm.TestJavap
  minor version: 0
  major version: 52
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
   #1 = Methodref          #5.#23         // java/lang/Object."<init>":()V
   #2 = Fieldref           #24.#25        // java/lang/System.out:Ljava/io/PrintStream;
   #3 = Methodref          #26.#27        // java/io/PrintStream.println:(I)V
   #4 = Class              #28            // jvm/TestJavap
   #5 = Class              #29            // java/lang/Object
   #6 = Utf8               <init>
   #7 = Utf8               ()V
   #8 = Utf8               Code
   #9 = Utf8               LineNumberTable
  #10 = Utf8               LocalVariableTable
  #11 = Utf8               this
  #12 = Utf8               Ljvm/TestJavap;
  #13 = Utf8               main
  #14 = Utf8               ([Ljava/lang/String;)V
  #15 = Utf8               args
  #16 = Utf8               [Ljava/lang/String;
  #17 = Utf8               x
  #18 = Utf8               I
  #19 = Utf8               y
  #20 = Utf8               z
  #21 = Utf8               SourceFile
  #22 = Utf8               TestJavap.java
  #23 = NameAndType        #6:#7          // "<init>":()V
  #24 = Class              #30            // java/lang/System
  #25 = NameAndType        #31:#32        // out:Ljava/io/PrintStream;
  #26 = Class              #33            // java/io/PrintStream
  #27 = NameAndType        #34:#35        // println:(I)V
  #28 = Utf8               jvm/TestJavap
  #29 = Utf8               java/lang/Object
  #30 = Utf8               java/lang/System
  #31 = Utf8               out
  #32 = Utf8               Ljava/io/PrintStream;
  #33 = Utf8               java/io/PrintStream
  #34 = Utf8               println
  #35 = Utf8               (I)V
{
  public jvm.TestJavap();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 9: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Ljvm/TestJavap;

 public static void main(java.lang.String[]);
     descriptor: ([Ljava/lang/String;)V  //方法描述，V表示该方法的放回值为
 void
     flags: ACC_PUBLIC, ACC_STATIC  // 方法修饰符，public、static的
     Code:
       // stack=2,操作栈的大小为2、locals=4，本地变量表大小，args_size=1, 参数
 的个数
       stack=2, locals=4, args_size=1
          0: iconst_2  //将数字2值压入操作栈，位于栈的最上面
          1: istore_1  //从操作栈中弹出一个元素(数字2)，放入到本地变量表中，位
 于下标为1的位置（下标为0的是this）
          2: iconst_5  //将数字5值压入操作栈，位于栈的最上面
          3: istore_2  //从操作栈中弹出一个元素(5)，放入到本地变量表中，位于第
 下标为2个位置
          4: iload_2  //将本地变量表中下标为2的位置元素压入操作栈（5）
          5: iload_1  //将本地变量表中下标为1的位置元素压入操作栈（2）
          6: isub  //操作栈中的2个数字相减
          7: istore_3 // 将相减的结果压入到本地本地变量表中，位于下标为3的位置
          // 通过#2号找到对应的常量，即可找到对应的引用
          8: getstatic     #2                  // Field
 java/lang/System.out:Ljava/io/PrintStream;
         11: iload_3 //将本地变量表中下标为3的位置元素压入操作栈（3）
         // 通过#3号找到对应的常量，即可找到对应的引用，进行方法调用
         12: invokevirtual #3                  // Method
 java/io/PrintStream.println:(I)V
         15: return //返回
       LineNumberTable:  //行号的列表
         line 6: 0
         line 7: 2
         line 8: 4
         line 9: 8
         line 10: 15
       LocalVariableTable: // 本地变量表
         Start  Length  Slot  Name   Signature
             0      16     0  args   [Ljava/lang/String;
             2      14     1     a   I
             4      12     2     b   I
             8       8     3     c   I
 }
SourceFile: "TestJavap.java"
